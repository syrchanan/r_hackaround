telecom_clean$`total eve calls`[telecom_clean$`total eve calls` <= 100] <- 1
telecom_clean$`total eve calls`[telecom_clean$`total eve calls` > 100] <- 2
table(telecom_clean$`total eve calls`)
telecom_clean$`total night calls`[telecom_clean$`total night calls` <= 100] <- 1
telecom_clean$`total night calls`[telecom_clean$`total night calls` > 100] <- 2
table(telecom_clean$`total night calls`)
telecom_clean$`total intl calls`[telecom_clean$`total intl calls` <= 5] <- 1
telecom_clean$`total intl calls`[telecom_clean$`total intl calls` > 5] <- 2
table(telecom_clean$`total intl calls`)
telecom_clean$`customer service calls`[telecom_clean$`customer service calls` <= 3] <- 1
telecom_clean$`customer service calls`[telecom_clean$`customer service calls` > 3] <- 2
table(telecom_clean$`customer service calls`)
Method.CORElearn <- CORElearn::attrEval(telecom_clean$churn ~ ., data=telecom_clean,  estimator = "InfGain")
Method.CORElearn
Method.CORElearn2 <- CORElearn::attrEval(telecom_clean$churn ~ ., data=telecom_clean,  estimator = "Gini")
(Method.CORElearn2)
Method.CORElearn3 <- CORElearn::attrEval(telecom_clean$churn ~ ., data=telecom_clean,  estimator = "GainRatio")
(Method.CORElearn3)
telecom %>%
select(-`state`,-`phone number`, -`area code`, -`total day charge`, -`total eve charge`, -`total night charge`, -`total intl charge`) %>%
mutate(`international plan` = factor(`international plan`),
`voice mail plan` = factor(`voice mail plan`)) -> telecom_clean
Method.CORElearn <- CORElearn::attrEval(telecom_clean$churn ~ ., data=telecom_clean,  estimator = "InfGain")
Method.CORElearn
Method.CORElearn2 <- CORElearn::attrEval(telecom_clean$churn ~ ., data=telecom_clean,  estimator = "Gini")
(Method.CORElearn2)
Method.CORElearn3 <- CORElearn::attrEval(telecom_clean$churn ~ ., data=telecom_clean,  estimator = "GainRatio")
(Method.CORElearn3)
Method.CORElearn <- CORElearn::attrEval(telecom$churn ~ ., data=telecom,  estimator = "InfGain")
Method.CORElearn
telecom %>%
select(-`state`,-`phone number`, -`area code`, -`total day charge`, -`total eve charge`, -`total night charge`, -`total intl charge`) %>%
mutate(`international plan` = factor(`international plan`),
`voice mail plan` = factor(`voice mail plan`)) -> telecom_clean
Method.CORElearn <- CORElearn::attrEval(telecom_clean$churn ~ ., data=telecom_clean,  estimator = "InfGain")
Method.CORElearn
Method.CORElearn2 <- CORElearn::attrEval(telecom_clean$churn ~ ., data=telecom_clean,  estimator = "Gini")
(Method.CORElearn2)
Method.CORElearn3 <- CORElearn::attrEval(telecom_clean$churn ~ ., data=telecom_clean,  estimator = "GainRatio")
(Method.CORElearn3)
table(telecom_clean$`total day minutes`)
telecom_clean$`total day minutes`[telecom_clean$`total day minutes` <= 100] <- 1
telecom_clean$`total day minutes`[telecom_clean$`total day minutes` > 100] <- 2
table(telecom_clean$`total day minutes`)
telecom_clean$`total eve minutes`[telecom_clean$`total eve minutes` <= 100] <- 1
telecom_clean$`total eve minutes`[telecom_clean$`total eve minutes` > 100] <- 2
table(telecom_clean$`total eve calls`)
table(telecom_clean$`total eve minutes`)
library(tidyverse)
library(rpart)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
library(Cairo)
library(CORElearn)
setwd("C:/Users/cdawg/git_repos/ist407")
telecom <- read_csv("telecoms_churn train.csv")
table(is.na(telecom))
str(telecom)
telecom %>%
select(-`state`,-`phone number`, -`area code`, -`total day charge`, -`total eve charge`, -`total night charge`, -`total intl charge`) %>%
mutate(`international plan` = case_when(
`international plan` == "yes" ~ TRUE,
`international plan` == "no" ~ FALSE
)) %>%
mutate(`voice mail plan` = case_when(
`voice mail plan` == "yes" ~ TRUE,
`voice mail plan` == "no" ~ FALSE
)) -> telecom_clean
telecom %>%
select(-`state`,-`phone number`, -`area code`, -`total day charge`, -`total eve charge`, -`total night charge`, -`total intl charge`) %>%
mutate(`international plan` = factor(`international plan`),
`voice mail plan` = factor(`voice mail plan`)) -> telecom_clean
telecom_clean$`account length`[telecom_clean$`account length` <= 81] <- 1
telecom_clean$`account length`[telecom_clean$`account length` > 81 & telecom_clean$`account length` < 162] <- 2
telecom_clean$`account length`[telecom_clean$`account length` >= 162] <- 3
table(telecom_clean$`account length`)
telecom_clean$`number vmail messages`[telecom_clean$`number vmail messages`==0] <- 0
telecom_clean$`number vmail messages`[telecom_clean$`number vmail messages` > 0] <- 1
table(telecom_clean$`number vmail messages`)
telecom_clean$`total day minutes`[telecom_clean$`total day minutes` <= 100] <- 1
telecom_clean$`total day minutes`[telecom_clean$`total day minutes` > 100] <- 2
table(telecom_clean$`total day minutes`)
telecom_clean$`total eve minutes`[telecom_clean$`total eve minutes` <= 100] <- 1
telecom_clean$`total eve minutes`[telecom_clean$`total eve minutes` > 100] <- 2
table(telecom_clean$`total eve minutes`)
telecom_clean$`total night minutes`[telecom_clean$`total night minutes` <= 100] <- 1
telecom_clean$`total night minutes`[telecom_clean$`total night minutes` > 100] <- 2
table(telecom_clean$`total night minutes`)
telecom_clean$`total intl minutes`[telecom_clean$`total intl minutes` <= 5] <- 1
telecom_clean$`total intl minutes`[telecom_clean$`total intl minutes` > 5] <- 2
table(telecom_clean$`total intl minutes`)
telecom_clean$`customer service calls`[telecom_clean$`customer service calls` <= 3] <- 1
telecom_clean$`customer service calls`[telecom_clean$`customer service calls` > 3] <- 2
table(telecom_clean$`customer service calls`)
Method.CORElearn <- CORElearn::attrEval(telecom_clean$churn ~ ., data=telecom_clean,  estimator = "InfGain")
Method.CORElearn
Method.CORElearn2 <- CORElearn::attrEval(telecom_clean$churn ~ ., data=telecom_clean,  estimator = "Gini")
(Method.CORElearn2)
Method.CORElearn3 <- CORElearn::attrEval(telecom_clean$churn ~ ., data=telecom_clean,  estimator = "GainRatio")
(Method.CORElearn3)
View(telecom_clean)
telecom %>%
select(-`state`,-`phone number`, -`area code`, -`total day charge`, -`total eve charge`, -`total night charge`, -`total intl charge`,-`total day calls`, -`total eve calls`, -`total night calls`, -`total intl calls`) %>%
mutate(`international plan` = factor(`international plan`),
`voice mail plan` = factor(`voice mail plan`)) -> telecom_clean
telecom_clean$`account length`[telecom_clean$`account length` <= 81] <- 1
telecom_clean$`account length`[telecom_clean$`account length` > 81 & telecom_clean$`account length` < 162] <- 2
telecom_clean$`account length`[telecom_clean$`account length` >= 162] <- 3
table(telecom_clean$`account length`)
telecom_clean$`number vmail messages`[telecom_clean$`number vmail messages`==0] <- 0
telecom_clean$`number vmail messages`[telecom_clean$`number vmail messages` > 0] <- 1
table(telecom_clean$`number vmail messages`)
telecom_clean$`total day minutes`[telecom_clean$`total day minutes` <= 100] <- 1
telecom_clean$`total day minutes`[telecom_clean$`total day minutes` > 100] <- 2
table(telecom_clean$`total day minutes`)
telecom_clean$`total eve minutes`[telecom_clean$`total eve minutes` <= 100] <- 1
telecom_clean$`total eve minutes`[telecom_clean$`total eve minutes` > 100] <- 2
table(telecom_clean$`total eve minutes`)
telecom_clean$`total night minutes`[telecom_clean$`total night minutes` <= 100] <- 1
telecom_clean$`total night minutes`[telecom_clean$`total night minutes` > 100] <- 2
table(telecom_clean$`total night minutes`)
telecom_clean$`total intl minutes`[telecom_clean$`total intl minutes` <= 5] <- 1
telecom_clean$`total intl minutes`[telecom_clean$`total intl minutes` > 5] <- 2
table(telecom_clean$`total intl minutes`)
telecom_clean$`customer service calls`[telecom_clean$`customer service calls` <= 3] <- 1
telecom_clean$`customer service calls`[telecom_clean$`customer service calls` > 3] <- 2
table(telecom_clean$`customer service calls`)
Method.CORElearn <- CORElearn::attrEval(telecom_clean$churn ~ ., data=telecom_clean,  estimator = "InfGain")
Method.CORElearn
Method.CORElearn2 <- CORElearn::attrEval(telecom_clean$churn ~ ., data=telecom_clean,  estimator = "Gini")
(Method.CORElearn2)
Method.CORElearn3 <- CORElearn::attrEval(telecom_clean$churn ~ ., data=telecom_clean,  estimator = "GainRatio")
(Method.CORElearn3)
View(telecom_clean)
telecom %>%
select(-`state`,-`phone number`, -`area code`, -`total day charge`, -`total eve charge`, -`total night charge`, -`total intl charge`, -`total day calls`, -`total eve calls`, -`total night calls`, -`total intl calls`) %>%
mutate(`international plan` = case_when(
`international plan` == "yes" ~ TRUE,
`international plan` == "no" ~ FALSE
)) %>%
mutate(`voice mail plan` = case_when(
`voice mail plan` == "yes" ~ TRUE,
`voice mail plan` == "no" ~ FALSE
)) -> telecom_clean
telecom %>%
select(-`state`,-`phone number`, -`area code`, -`total day charge`, -`total eve charge`, -`total night charge`, -`total intl charge`,-`total day calls`, -`total eve calls`, -`total night calls`, -`total intl calls`) %>%
mutate(`international plan` = factor(`international plan`),
`voice mail plan` = factor(`voice mail plan`)) -> telecom_clean
table(telecom_clean$`account length`)
telecom_clean$`account length`[telecom_clean$`account length` <= 81] <- 1
telecom_clean$`account length`[telecom_clean$`account length` > 81 & telecom_clean$`account length` < 162] <- 2
telecom_clean$`account length`[telecom_clean$`account length` >= 162] <- 3
table(telecom_clean$`account length`)
table(telecom_clean$`number vmail messages`)
telecom_clean$`number vmail messages`[telecom_clean$`number vmail messages`==0] <- 0
telecom_clean$`number vmail messages`[telecom_clean$`number vmail messages` > 0] <- 1
table(telecom_clean$`number vmail messages`)
table(telecom_clean$`total day minutes`)
table(telecom_clean$`total day minutes`>200)
table(telecom_clean$`total day minutes`>300)
table(telecom_clean$`total day minutes`>22000)
table(telecom_clean$`total day minutes`>220)
table(telecom_clean$`total day minutes`>200)
table(telecom_clean$`total day minutes`>150)
table(telecom_clean$`total day minutes`>175)
table(telecom_clean$`total eve minutes`>175)
table(telecom_clean$`total eve minutes`>200)
table(telecom_clean$`total night minutes`>200)
table(telecom_clean$`total intl minutes`)
table(telecom_clean$`total intl minutes`>10)
library(tidyverse)
library(rpart)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
library(Cairo)
library(CORElearn)
setwd("C:/Users/cdawg/git_repos/ist407")
telecom <- read_csv("telecoms_churn train.csv")
table(is.na(telecom))
str(telecom)
telecom %>%
select(-`state`,-`phone number`, -`area code`, -`total day charge`, -`total eve charge`, -`total night charge`, -`total intl charge`, -`total day calls`, -`total eve calls`, -`total night calls`, -`total intl calls`) %>%
mutate(`international plan` = case_when(
`international plan` == "yes" ~ TRUE,
`international plan` == "no" ~ FALSE
)) %>%
mutate(`voice mail plan` = case_when(
`voice mail plan` == "yes" ~ TRUE,
`voice mail plan` == "no" ~ FALSE
)) -> telecom_clean
telecom %>%
select(-`state`,-`phone number`, -`area code`, -`total day charge`, -`total eve charge`, -`total night charge`, -`total intl charge`,-`total day calls`, -`total eve calls`, -`total night calls`, -`total intl calls`) %>%
mutate(`international plan` = factor(`international plan`),
`voice mail plan` = factor(`voice mail plan`)) -> telecom_clean
telecom_clean$`account length`[telecom_clean$`account length` <= 81] <- 1
telecom_clean$`account length`[telecom_clean$`account length` > 81 & telecom_clean$`account length` < 162] <- 2
telecom_clean$`account length`[telecom_clean$`account length` >= 162] <- 3
table(telecom_clean$`account length`)
telecom_clean$`number vmail messages`[telecom_clean$`number vmail messages`==0] <- 0
telecom_clean$`number vmail messages`[telecom_clean$`number vmail messages` > 0] <- 1
table(telecom_clean$`number vmail messages`)
telecom_clean$`total day minutes`[telecom_clean$`total day minutes` <= 175] <- 1
telecom_clean$`total day minutes`[telecom_clean$`total day minutes` > 175] <- 2
table(telecom_clean$`total day minutes`)
telecom_clean$`total eve minutes`[telecom_clean$`total eve minutes` <= 200] <- 1
telecom_clean$`total eve minutes`[telecom_clean$`total eve minutes` > 200] <- 2
table(telecom_clean$`total eve minutes`)
telecom_clean$`total night minutes`[telecom_clean$`total night minutes` <= 200] <- 1
telecom_clean$`total night minutes`[telecom_clean$`total night minutes` > 200] <- 2
table(telecom_clean$`total night minutes`)
telecom_clean$`total intl minutes`[telecom_clean$`total intl minutes` <= 10] <- 1
telecom_clean$`total intl minutes`[telecom_clean$`total intl minutes` > 10] <- 2
table(telecom_clean$`total intl minutes`)
telecom_clean$`customer service calls`[telecom_clean$`customer service calls` <= 3] <- 1
telecom_clean$`customer service calls`[telecom_clean$`customer service calls` > 3] <- 2
table(telecom_clean$`customer service calls`)
Method.CORElearn <- CORElearn::attrEval(telecom_clean$churn ~ ., data=telecom_clean,  estimator = "InfGain")
Method.CORElearn
Method.CORElearn2 <- CORElearn::attrEval(telecom_clean$churn ~ ., data=telecom_clean,  estimator = "Gini")
(Method.CORElearn2)
Method.CORElearn3 <- CORElearn::attrEval(telecom_clean$churn ~ ., data=telecom_clean,  estimator = "GainRatio")
(Method.CORElearn3)
fit <- rpart(telecom_clean$churn ~ ., data = telecom_clean, method="class")
summary(fit)
predicted = predict(fit,CleanTest, type="class")
predicted = predict(fit,telecom_clean, type="class")
(head(predicted,n=10))
fancyRpartPlot(fit)
pred_fit = predict(fit,telecom_clean, type="class")
accuracy = sum(pred_fit == telecom_clean$churn)/length(telecom_clean$churn)
fit2 <- rpart(telecom_clean$churn ~ ., data = telecom_clean, method="class",control=rpart.control(minsplit=2, cp=0))
summary(fit2)
predicted = predict(fit2,telecom_clean, type="class")
(head(predicted,n=10))
fancyRpartPlot(fit2)
pred_fit2 = predict(fit2,telecom_clean, type="class")
accuracy2 = sum(pred_fit2 == telecom_clean$churn)/length(telecom_clean$churn)
fit2 <- rpart(telecom_clean$churn ~ ., data = telecom_clean, method="class",control=rpart.control(minsplit=2, cp=0.1))
summary(fit2)
predicted = predict(fit2,telecom_clean, type="class")
(head(predicted,n=10))
fancyRpartPlot(fit2)
fit2 <- rpart(telecom_clean$churn ~ ., data = telecom_clean, method="class",control=rpart.control(minsplit=2, cp=0.001))
summary(fit2)
predicted = predict(fit2,telecom_clean, type="class")
(head(predicted,n=10))
fancyRpartPlot(fit2)
pred_fit2 = predict(fit2,telecom_clean, type="class")
accuracy2 = sum(pred_fit2 == telecom_clean$churn)/length(telecom_clean$churn)
fit2 <- rpart(telecom_clean$churn ~ ., data = telecom_clean, method="class",control=rpart.control(minsplit=2, cp=0.01))
summary(fit2)
predicted = predict(fit2,telecom_clean, type="class")
(head(predicted,n=10))
fancyRpartPlot(fit2)
pred_fit2 = predict(fit2,telecom_clean, type="class")
accuracy2 = sum(pred_fit2 == telecom_clean$churn)/length(telecom_clean$churn)
fit2 <- rpart(telecom_clean$churn ~ ., data = telecom_clean, method="class",control=rpart.control(minsplit=2, cp=0.005))
summary(fit2)
predicted = predict(fit2,telecom_clean, type="class")
(head(predicted,n=10))
fancyRpartPlot(fit2)
pred_fit2 = predict(fit2,telecom_clean, type="class")
accuracy2 = sum(pred_fit2 == telecom_clean$churn)/length(telecom_clean$churn)
fit2 <- rpart(telecom_clean$churn ~ ., data = telecom_clean, method="class",control=rpart.control(minsplit=2, cp=0.0025))
summary(fit2)
predicted = predict(fit2,telecom_clean, type="class")
(head(predicted,n=10))
fancyRpartPlot(fit2)
pred_fit2 = predict(fit2,telecom_clean, type="class")
accuracy2 = sum(pred_fit2 == telecom_clean$churn)/length(telecom_clean$churn)
printcp(fit)
printcp(fit2)
fit2 <- rpart(telecom_clean$churn ~ ., data = telecom_clean, method="class",control=rpart.control(minsplit=2, cp=0.0041408))
summary(fit2)
predicted = predict(fit2,telecom_clean, type="class")
(head(predicted,n=10))
fancyRpartPlot(fit2)
pred_fit2 = predict(fit2,telecom_clean, type="class")
accuracy2 = sum(pred_fit2 == telecom_clean$churn)/length(telecom_clean$churn)
fit2 <- rpart(telecom_clean$churn ~ ., data = telecom_clean, method="class",control=rpart.control(minsplit=2, cp=0.001))
summary(fit2)
predicted = predict(fit2,telecom_clean, type="class")
(head(predicted,n=10))
fancyRpartPlot(fit2)
pred_fit2 = predict(fit2,telecom_clean, type="class")
accuracy2 = sum(pred_fit2 == telecom_clean$churn)/length(telecom_clean$churn)
fit2 <- rpart(telecom_clean$churn ~ ., data = telecom_clean, method="class",control=rpart.control(minsplit=2, cp=0.00025))
summary(fit2)
predicted = predict(fit2,telecom_clean, type="class")
(head(predicted,n=10))
fancyRpartPlot(fit2)
pred_fit2 = predict(fit2,telecom_clean, type="class")
accuracy2 = sum(pred_fit2 == telecom_clean$churn)/length(telecom_clean$churn)
fit2 <- rpart(telecom_clean$churn ~ ., data = telecom_clean, method="class",control=rpart.control(minsplit=2, cp=0.0025))
summary(fit2)
predicted = predict(fit2,telecom_clean, type="class")
(head(predicted,n=10))
fancyRpartPlot(fit2)
pred_fit2 = predict(fit2,telecom_clean, type="class")
accuracy2 = sum(pred_fit2 == telecom_clean$churn)/length(telecom_clean$churn)
library(tidyverse)
shooting_data <- read_csv("project_data.csv")
View(shooting_data)
shooting_data %>%
filter(!is.na(ZIP)) %>%
View()
View(shooting_data)
#install.packages("tidyverse")
library(tidyverse)
library(magrittr)
library(rpart)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
library(Cairo)
library(forcats)
library(dplyr)
library(stringr)
#install.packages("e1071")
library(e1071)
#install.packages("mlr")
library(mlr)
#install.packages("naivebayes")
library(naivebayes)
# install.packages("caret")
library(caret)
FedDF <- read_csv("fedPapers85.csv", skip=0, comment="#", col_names=TRUE)
View(FedDF)
(head(FedDF, n=15))
## type dbl means double which is a long decimal number
(head(FedDF[1], n=15))
View(FedDF)
#####  CREATE TEST SET (just dispt) and TRAIN SET (all others) ####
Fed_TEST <- filter(FedDF, author=="dispt")
Fed_TRAIN <- filter(FedDF, author != "dispt")
## Check yourself!
(Fed_TEST)
(head(Fed_TRAIN, n=20))
## Remove COlumn 2 in both the TEST and TRAIN set.
(Fed_TEST[2])
Fed_TEST <- Fed_TEST[-2]
Fed_TRAIN <- Fed_TRAIN[-2]
(Fed_TEST)
(head(Fed_TRAIN, n=20))
## This is from the dplyr package....
## if its a char, change it to factor
str(Fed_TEST)
str(Fed_TRAIN)
Fed_TEST <- mutate_if(Fed_TEST, is.character, as.factor)
str(Fed_TEST)
Fed_TRAIN <- mutate_if(Fed_TRAIN, is.character, as.factor)
str(Fed_TRAIN)
## Next - and we should have done this first! is we must make
## sure there are no NAs
## Both of the following give a "0" confirming no NAs
(sum1 <- sum(is.na(Fed_TEST)))
(sum2 <- sum(is.na(Fed_TRAIN)))
str(Fed_TEST)
### Hmmmm - the above is NOT going to work as a test set - WHY??
### We forgot to remove the label!!
(Fed_TEST <- Fed_TEST[-1])
str(Fed_TRAIN)
#### Here we have a problem as well - what is it??
#### Did you notice that we have "4" factors for author??
#### This is not right!
## We should only have three - let's use table to take a closer look
(table(Fed_TRAIN$author))
## using....library(dplyr)
## using.....library(forcats)
Fed_TRAIN$author <-Fed_TRAIN$author %>% fct_collapse(Hamilton = c("Hamilton","HM"))
## check it
(table(Fed_TRAIN$author))
## (1) Update training data to remove Jay
Fed_TRAIN <- filter(Fed_TRAIN, author != "Jay")
Fed_TRAIN <- filter(Fed_TRAIN, author != "HM")
##Fed_TRAIN$author <-Fed_TRAIN$author %>% fct_collapse(Hamilton = c("Hamilton","HM", "Jay"))
str(Fed_TRAIN)
(table(Fed_TRAIN$author))
(head(Fed_TRAIN))
(table(Fed_TRAIN$author))
Fed_DT_FIT <- rpart(author~.,data=Fed_TRAIN, 	method="class")
##control = rpart.control(minsplit=1))
summary(Fed_DT_FIT)
fancyRpartPlot(Fed_DT_FIT)
## To see if the model can predict the training set - test it on the training set...
Fed_DT_Train_predicted= predict(Fed_DT_FIT,Fed_TRAIN[-1], type="class")
(table(Fed_DT_Train_predicted,Fed_TRAIN$author))
## See how it does on the test data...
Fed_DT_predicted= predict(Fed_DT_FIT,Fed_TEST, type="class")
(Fed_DT_predicted)
(table(Fed_DT_predicted))
(table(Fed_DT_Train_predicted))
(table(Fed_DT_Train_predicted,Fed_TRAIN$author))
table(Fed_TRAIN$author)
## WAY 1 NB
NB_Fed_classfier <- naiveBayes(author ~.,data=Fed_TRAIN)
NB_Fed_predictTrainSet <-predict(NB_Fed_classfier, Fed_TRAIN[-1])
table(NB_Fed_predictTrainSet,Fed_TRAIN$author)
## Now try to predict the test set
NB_Fed_Prediction <- predict(NB_Fed_classfier, Fed_TEST)
(table(NB_Fed_Prediction))
plot(NB_Fed_Prediction)
SVM_Fed_fit_P <- svm(author~., data=Fed_TRAIN,
kernel="polynomial", cost=100,
scale=FALSE)
print(SVM_Fed_fit_P)
## COnfusion Matrix for training data to check model
(pred_Fed_train <- predict(SVM_Fed_fit_P, Fed_TRAIN[-1], type="class"))
(table(pred_Fed_train, Fed_TRAIN$author))
######## linear
SVM_Fed_fit_L <- svm(author~., data=Fed_TRAIN,
kernel="linear", cost=100,
scale=FALSE)
print(SVM_Fed_fit_L)
## COnfusion Matrix for training data to check model
(pred_Fed_trainL <- predict(SVM_Fed_fit_L, Fed_TRAIN[-1], type="class"))
(table(pred_Fed_trainL, Fed_TRAIN$author))   ### GOOD! The cost needed to be high!
## Now check the test group
(pred_Fed_testL <- predict(SVM_Fed_fit_L, Fed_TEST, type="class"))
table(pred_Fed_testL)
SVM_Fed_fit_R <- svm(author~., data=Fed_TRAIN,
kernel="radial", cost=100,
scale=FALSE)
print(SVM_Fed_fit_R)
## COnfusion Matrix for training data to check model
(pred_Fed_trainR <- predict(SVM_Fed_fit_R, Fed_TRAIN[-1], type="class"))
(table(pred_Fed_trainR, Fed_TRAIN$author))  ##Not too bad!
##Prediction --
(pred_Fed <- predict(SVM_Fed_fit_R, Fed_TEST, type="class"))
table(pred_Fed)
(Fed_TEST)
(head(Fed_TRAIN, n=25))
plot(Fed_TRAIN$author)
# get a guess for k
k_guess <- round(sqrt(nrow(Fed_TRAIN)))
kNN_FED_fit <- class::knn(train=Fed_TRAIN[-1], test=Fed_TRAIN[-1],
cl=Fed_TRAIN$author, k = k_guess, prob=F)
print(kNN_FED_fit)
## Check the classification accuracy
(table(kNN_FED_fit, Fed_TRAIN$author))
kNN_FED_fit2 <- class::knn(train=Fed_TRAIN[-1], test=Fed_TEST,
cl=Fed_TRAIN$author, k = k_guess, prob=F)
print(kNN_FED_fit2)
table(kNN_FED_fit2)
############### Compare results of the models....
print("KNN model")
print(kNN_FED_fit2)
print("SVM Model Linear")
(pred_Fed_testL <- predict(SVM_Fed_fit_L, Fed_TEST, type="class"))
print("DT Model")
(Fed_DT_predicted= predict(Fed_DT_FIT,Fed_TEST, type="class"))
print("NB Model")
(NB_Fed_Prediction <- predict(NB_Fed_classfier, Fed_TEST))
## Check the classification accuracy
(table(kNN_FED_fit, Fed_TRAIN$author))
classification_accuracy <- ((Fed_DT_Train_predicted==Fed_TRAIN$author)/Fed_TRAIN$author)
Fed_DT_Train_predicted==Fed_TRAIN$author
## See how it does on the test data...
Fed_DT_predicted= predict(Fed_DT_FIT,Fed_TEST, type="class")
classification_accuracy <- ((Fed_DT_Train_predicted==Fed_TRAIN$author)/nrow(Fed_TRAIN$author))
classification_accuracy <- ((sum(Fed_DT_Train_predicted==Fed_TRAIN$author))/nrow(Fed_TRAIN$author))
Fed_DT_Train_predicted==Fed_TRAIN$author
sum(Fed_DT_Train_predicted==Fed_TRAIN$author)
nrow(Fed_TRAIN$author)
count(Fed_TRAIN$author)
count(Fed_TRAIN, "author")
66/count(Fed_TRAIN, "author")
nrow(Fed_TRAIN)
classification_accuracy <- ((Fed_DT_Train_predicted==Fed_TRAIN$author)/nrow(Fed_TRAIN))
classification_accuracy <- (sum((Fed_DT_Train_predicted==Fed_TRAIN$author))/nrow(Fed_TRAIN))
classification_accuracy <- (sum((NB_Fed_predictTrainSet==Fed_TRAIN$author))/nrow(Fed_TRAIN))
table(NB_Fed_predictTrainSet,Fed_TRAIN$author)
classification_accuracy <- (sum((NB_Fed_predictTrainSet==Fed_TRAIN$author))/nrow(Fed_TRAIN))
### NOT A GOOD MODEL! Try another kernel
classification_accuracy <- (sum((pred_Fed_train==Fed_TRAIN$author))/nrow(Fed_TRAIN))
classification_accuracy <- (sum((pred_Fed_trainL==Fed_TRAIN$author))/nrow(Fed_TRAIN))
classification_accuracy <- (sum((pred_Fed_trainR==Fed_TRAIN$author))/nrow(Fed_TRAIN))
classification_accuracy <- (sum((kNN_FED_fit==Fed_TRAIN$author))/nrow(Fed_TRAIN))
classification_accuracy <- (sum((kNN_FED_fit2==Fed_TRAIN$author))/nrow(Fed_TRAIN))
classification_accuracy <- (sum((kNN_FED_fit1==Fed_TRAIN$author))/nrow(Fed_TRAIN))
classification_accuracy <- (sum((kNN_FED_fit==Fed_TRAIN$author))/nrow(Fed_TRAIN))
print("NB Model")
(NB_Fed_Prediction <- predict(NB_Fed_classfier, Fed_TEST))
# install.packages(arules)
# install.packages(arulesViz)
library(arules)
library(arulesViz)
groceries <- read.transactions("groceries.csv", format="basket", sep="," )
View(groceries)
summary(groceries)
setwd("C:/Users/cdawg/git_repos/R hackaround")
library(pacman)
p_load("arules", "arulesViz", "tidyverse")
data <- read_csv("all_yan.csv")
setwd("C:/Users/cdawg/git_repos/R hackaround")
setwd("C:/Users/cdawg/git_repos/r_hackaround")
setwd("C:/Users/cdawg/git_repos/r_hackaround")
library(pacman)
p_load("arules", "arulesViz", "tidyverse")
data <- read_csv("all_yan.csv")
data %>%
select(-`NY Time`, -SL, -Sum) %>%
replace(is.na(.), 0) %>%
mutate_all(as.factor) -> clean_data
View(clean_data)
prop.table(table(clean_data$TP))
dataX <- as(clean_data, 'transactions')
View(dataX)
itemFrequency(dataX)
itemFrequencyPlot(dataX)
