if (!require("pacman")) install.packages("pacman")
pacman::p_load("tidyverse")
set.seed(8675309)
elves <- read_lines("day_01_input.txt")
split(elves, sep = "")
elves <- read_lines("day_01_input.txt")
emp_check <- c()
temp_list <- c()
count <- 0
temp_list <- c()
elves <- as.double(read_lines("day_01_input.txt"))
head(elves)
head(elves, 10)
count <- 1
temp_list <- c()
count <- 1
for (i in seq_along(elves)) {
if (is.na(elves[i])) {
total <- sum(temp_list)
assign(paste("elf", count, sep = "-"))
temp_list <- c()
count <- count + 1
} else {
temp_list <- append(temp_list, elves[i])
}
}
for (i in seq_along(elves)) {
if (is.na(elves[i])) {
total <- sum(temp_list)
assign(paste("elf", count, sep = "-"), total)
temp_list <- c()
count <- count + 1
} else {
temp_list <- append(temp_list, elves[i])
}
}
temp_list <- c()
count <- 1
for (i in seq_along(elves)) {
if (is.na(elves[i])) {
total <- sum(temp_list)
assign(paste("elf", count, sep = "-"), total)
temp_list <- c()
count <- count + 1
} else {
temp_list <- append(temp_list, elves[i])
}
}
rm(list = ls())
if (!require("pacman")) install.packages("pacman")
pacman::p_load("tidyverse")
set.seed(8675309)
elves <- as.double(read_lines("day_01_input.txt"))
temp_list <- c()
count <- 1
for (i in seq_along(elves)) {
if (is.na(elves[i])) {
total <- sum(temp_list)
total_list <- append(total_list, total)
temp_list <- c()
count <- count + 1
} else {
temp_list <- append(temp_list, elves[i])
}
}
total_list <- c()
count <- 1
for (i in seq_along(elves)) {
if (is.na(elves[i])) {
total <- sum(temp_list)
total_list <- append(total_list, total)
temp_list <- c()
count <- count + 1
} else {
temp_list <- append(temp_list, elves[i])
}
}
max(total_list)
total_list
temp_list <- c()
total_list <- c()
count <- 1
for (i in seq_along(elves)) {
if (is.na(elves[i])) {
total <- sum(temp_list)
total_list <- append(total_list, total)
temp_list <- c()
count <- count + 1
} else {
temp_list <- append(temp_list, elves[i])
}
}
max(total_list)
arrange(desc(total_list))
tibble(total_list)
tibble(total_list) %>%
arrange(desc(total_list))
tibble(total_list) %>%
arrange(desc(total_list)) %>%
slice(1:3) %>%
pull(1) %>%
sum()
if (!require("pacman")) install.packages("pacman")
pacman::p_load("tidyverse")
set.seed(8675309)
elves <- read_lines("day_01/day_01_input.txt")
temp_list <- c()
total_list <- c()
elves <- as.numeric(read_lines("day_01/day_01_input.txt"))
temp_list <- c()
total_list <- c()
for (i in seq_along(elves)) {
if (is.na(elves[i])) {
total <- sum(temp_list)
total_list <- append(total_list, total)
temp_list <- c()
} else {
temp_list <- append(temp_list, elves[i])
}
}
max(total_list)
total_list %>%
tibble() %>%
arrange(desc(total_list)) %>%
slice(1:3) %>%
pull(1) %>%
sum()
if (!require("pacman")) install.packages("pacman")
pacman::p_load("tidyverse")
set.seed(8675309)
input <- read_lines("./day_02/input.txt")
input %>%
tibble() %>%
separate(input, c("opponent", "self"), sep = " ")
input %>%
tibble() %>%
separate(1, c("opponent", "self"), sep = " ")
opp_key <- c("A" = "rock", "B" = "paper", "C" = "scissors")
self_key <- c("X" = "rock", "Y" = "paper", "Z" = "scissors")
opp_key["A"]
input %>%
tibble() %>%
separate(1, c("opponent", "self"), sep = " ") %>%
mutate(opponent = opp_key[opponent])
input %>%
tibble() %>%
separate(1, c("opponent", "self"), sep = " ") %>%
mutate(opponent = opp_key[opponent],
self = self_key[self]) %>%
mutate(shape_score = case_when(
self == "rock" ~ 1,
self == "paper" ~ 2,
self == "scissors" ~ 3
))
input %>%
tibble() %>%
separate(1, c("opponent", "self"), sep = " ") %>%
mutate(opponent = opp_key[opponent],
self = self_key[self]) %>%
mutate(shape_score = case_when(
self == "rock" ~ 1,
self == "paper" ~ 2,
self == "scissors" ~ 3
)) %>%
mutate(outcome = case_when(
opponent == "scissors" & self == "paper" ~ "lose",
opponent == "paper" & self == "rock" ~ "lose",
opponent == "rock" & self == "scissors" ~ "lose",
opponent == "rock" & self == "paper" ~ "win",
opponent == "scissors" & self == "rock" ~ "win",
opponent == "paper" & self == "scissors" ~ "win",
T ~ "draw"
))
input %>%
tibble() %>%
separate(1, c("opponent", "self"), sep = " ") %>%
mutate(opponent = opp_key[opponent],
self = self_key[self]) %>%
mutate(shape_score = case_when(
self == "rock" ~ 1,
self == "paper" ~ 2,
self == "scissors" ~ 3
)) %>%
mutate(outcome = case_when(
opponent == "scissors" & self == "paper" ~ "lose",
opponent == "paper" & self == "rock" ~ "lose",
opponent == "rock" & self == "scissors" ~ "lose",
opponent == "rock" & self == "paper" ~ "win",
opponent == "scissors" & self == "rock" ~ "win",
opponent == "paper" & self == "scissors" ~ "win",
T ~ "draw"
)) %>%
mutate(final_score = case_when(
outcome == "win" ~ 6 + shape_score,
outcome == "draw" ~ 3 + shape_score,
outcome == "lose" ~ 0 + shape_score
))
input %>%
tibble() %>%
separate(1, c("opponent", "self"), sep = " ") %>%
mutate(opponent = opp_key[opponent],
self = self_key[self]) %>%
mutate(shape_score = case_when(
self == "rock" ~ 1,
self == "paper" ~ 2,
self == "scissors" ~ 3
)) %>%
mutate(outcome = case_when(
opponent == "scissors" & self == "paper" ~ "lose",
opponent == "paper" & self == "rock" ~ "lose",
opponent == "rock" & self == "scissors" ~ "lose",
opponent == "rock" & self == "paper" ~ "win",
opponent == "scissors" & self == "rock" ~ "win",
opponent == "paper" & self == "scissors" ~ "win",
T ~ "draw"
)) %>%
mutate(final_score = case_when(
outcome == "win" ~ 6 + shape_score,
outcome == "draw" ~ 3 + shape_score,
outcome == "lose" ~ 0 + shape_score
)) -> final_tbl
final_tbl %>%
pull(final_score) %>%
sum()
input %>%
tibble() %>%
separate(1, c("opponent", "result"), sep = " ") %>%
mutate(opponent = opp_key[opponent],
result = res_key[result]) %>% View()
opp_key <- c("A" = "rock", "B" = "paper", "C" = "scissors")
res_key <- c("X" = "lose", "Y" = "draw", "Z" = "win")
input %>%
tibble() %>%
separate(1, c("opponent", "result"), sep = " ") %>%
mutate(opponent = opp_key[opponent],
result = res_key[result]) %>% View()
res_key == "win"
names(res_key == "win")
which(res_key == "win")
names(which(res_key == "win"))
win_key[opponent]
win_key <- c("scissors" = "rock", "rock" = "paper", "paper" = "scissors")
input %>%
tibble() %>%
separate(1, c("opponent", "result"), sep = " ") %>%
mutate(opponent = opp_key[opponent],
result = res_key[result]) %>%
mutate(self = case_when(
result == "win" ~ win_key[opponent]
))
input %>%
tibble() %>%
separate(1, c("opponent", "result"), sep = " ") %>%
mutate(opponent = opp_key[opponent],
result = res_key[result]) %>%
mutate(self = case_when(
result == "win" ~ win_key[opponent],
result == "lose" ~ names(which(win_key == opponent)),
T ~ opponent
))
names(which(win_key == opponent))
opponent <- "rock"
names(which(win_key == opponent))
input %>%
tibble() %>%
separate(1, c("opponent", "result"), sep = " ") %>%
mutate(opponent = opp_key[opponent],
result = res_key[result]) %>%
mutate(self = case_when(
result == "win" ~ win_key[opponent],
result == "lose" ~ names(which(win_key == opponent)),
T ~ opponent
))
input %>%
tibble() %>%
separate(1, c("opponent", "result"), sep = " ") %>%
mutate(opponent = opp_key[opponent],
result = res_key[result]) %>% View()
input %>%
tibble() %>%
separate(1, c("opponent", "result"), sep = " ") %>%
mutate(opponent = opp_key[opponent],
result = res_key[result]) %>% View()
input %>%
tibble() %>%
separate(1, c("opponent", "result"), sep = " ") %>%
mutate(opponent = opp_key[opponent],
result = res_key[result]) -> temp
names(which(win_key == temp$opponent))
lose_key <- c("paper" = "rock", "scissors" = "paper", "rock" = "scissors")
mutate(self = case_when(
result == "win" ~ win_key[opponent],
result == "lose" ~ lose_key[opponent],
T ~ opponent
))
input %>%
tibble() %>%
separate(1, c("opponent", "result"), sep = " ") %>%
mutate(opponent = opp_key[opponent],
result = res_key[result]) %>%
mutate(self = case_when(
result == "win" ~ win_key[opponent],
result == "lose" ~ lose_key[opponent],
T ~ opponent
))
input %>%
tibble() %>%
separate(1, c("opponent", "result"), sep = " ") %>%
mutate(opponent = opp_key[opponent],
result = res_key[result]) %>%
mutate(self = case_when(
result == "win" ~ win_key[opponent],
result == "lose" ~ lose_key[opponent],
T ~ opponent
)) %>%
mutate(shape_score = case_when(
self == "rock" ~ 1,
self == "paper" ~ 2,
self == "scissors" ~ 3
)) %>%
mutate(final_score = case_when(
result == "win" ~ 6 + shape_score,
result == "draw" ~ 3 + shape_score,
result == "lose" ~ 0 + shape_score
)) -> final_tbl
final_tbl %>%
pull(final_score) %>%
sum()
rm(list = ls())
if (!require("pacman")) install.packages("pacman")
pacman::p_load("tidyverse")
set.seed(8675309)
input <- read_lines("./day_02/input.txt")
# Part 1 ####
opp_key <- c("A" = "rock", "B" = "paper", "C" = "scissors")
self_key <- c("X" = "rock", "Y" = "paper", "Z" = "scissors")
input %>%
tibble() %>%
separate(1, c("opponent", "self"), sep = " ") %>%
mutate(opponent = opp_key[opponent],
self = self_key[self]) %>%
mutate(shape_score = case_when(
self == "rock" ~ 1,
self == "paper" ~ 2,
self == "scissors" ~ 3
)) %>%
mutate(outcome = case_when(
opponent == "scissors" & self == "paper" ~ "lose",
opponent == "paper" & self == "rock" ~ "lose",
opponent == "rock" & self == "scissors" ~ "lose",
opponent == "rock" & self == "paper" ~ "win",
opponent == "scissors" & self == "rock" ~ "win",
opponent == "paper" & self == "scissors" ~ "win",
T ~ "draw"
)) %>%
mutate(final_score = case_when(
outcome == "win" ~ 6 + shape_score,
outcome == "draw" ~ 3 + shape_score,
outcome == "lose" ~ 0 + shape_score
)) -> final_tbl
final_tbl %>%
pull(final_score) %>%
sum()
# Part 2 ####
res_key <- c("X" = "lose", "Y" = "draw", "Z" = "win")
win_key <- c("scissors" = "rock", "rock" = "paper", "paper" = "scissors")
lose_key <- c("paper" = "rock", "scissors" = "paper", "rock" = "scissors")
input %>%
tibble() %>%
separate(1, c("opponent", "result"), sep = " ") %>%
mutate(opponent = opp_key[opponent],
result = res_key[result]) %>%
mutate(self = case_when(
result == "win" ~ win_key[opponent],
result == "lose" ~ lose_key[opponent],
T ~ opponent
)) %>%
mutate(shape_score = case_when(
self == "rock" ~ 1,
self == "paper" ~ 2,
self == "scissors" ~ 3
)) %>%
mutate(final_score = case_when(
result == "win" ~ 6 + shape_score,
result == "draw" ~ 3 + shape_score,
result == "lose" ~ 0 + shape_score
)) -> final_tbl_2
final_tbl_2 %>%
pull(final_score) %>%
sum()
final_tbl %>%
pull(final_score) %>%
sum() -> part_1_ans
final_tbl_2 %>%
pull(final_score) %>%
sum() -> part_2_ans
