svm_lin_real <- svm(train_set$win~., data=train_set,
kernel="linear", cost=100,
scale=FALSE)
pred <- predict(svm_lin_real, clean_tournament, type="class")
clean_tournament$win <- pred
round_2 <- results(2)
clean_tournament %>%
filter(win==1) %>% View()
clean_tournament %>%
slice(1:32) %>% View()
clean_tournament %>%
slice(32) %>% View()
tibble(clean_tournament) %>%
slice(32) %>% View()
tibble(clean_tournament)
clean_tournament <- tibble(clean_tournament)
clean_tournament %>%
slice(32) %>% View()
clean_tournament %>%
dplyr::slice(32) %>% View()
clean_tournament %>%
dplyr::slice(1:32) %>% View()
View(clean_tournament)
clean_tournament %>%
dplyr::slice(1:5, 7:32, 38) %>% View()
clean_tournament %>%
dplyr::slice(1:5, 7:32, 38) -> round_2
clean_tournament %>%
dplyr::slice(1:5, 7:32, 38) %>%
mutate(advance = case_when(
win == 1 ~ team,
win == 0 ~ opp
)) %>% View()
clean_tournament %>%
dplyr::slice(1:5, 7:32, 38) %>%
mutate(advance = case_when(
win == 1 ~ team,
win == 0 ~ opp
)) %>% slice(1:5, 32, 6:31) %>% View()
clean_tournament %>%
dplyr::slice(1:5, 7:32, 38) %>%
mutate(advance = case_when(
win == 1 ~ team,
win == 0 ~ opp
)) %>% dplyr::slice(1:5, 32, 6:31) %>% View()
clean_tournament %>%
dplyr::slice(1:5, 7:32, 38) %>%
mutate(advance = case_when(
win == 1 ~ team,
win == 0 ~ opp
)) %>% dplyr::slice(1:5, 32, 6:31) %>%
select(advance) -> round_2
clean_tournament %>%
dplyr::slice(1:5, 7:32, 38) %>%
mutate(advance = case_when(
win == 1 ~ team,
win == 0 ~ opp
)) %>% dplyr::slice(1:5, 32, 6:31) %>%
select(advance) -> advance
master %>%
mutate(team = split(advance, 1:2)[[2]],
opp = split(advance, 1:2)[[1]]) -> master_home
master <- tibble(game_id = 1:(length(advance)/2))
master %>%
mutate(team = split(advance, 1:2)[[2]],
opp = split(advance, 1:2)[[1]]) -> master_home
master %>%
mutate(team = split(advance, 1:2)[[1]],
opp = split(advance, 1:2)[[2]]) -> master_away
master_home %>%
bind_rows(master_away) -> master_overall
split(advance, 1:2)[[2]]
clean_tournament %>%
dplyr::slice(1:5, 7:32, 38) %>%
mutate(advance = case_when(
win == 1 ~ team,
win == 0 ~ opp
)) %>% dplyr::slice(1:5, 32, 6:31) %>%
select(advance) %>%
as_vector() -> advance
master <- tibble(game_id = 1:(length(advance)/2))
master %>%
mutate(team = split(advance, 1:2)[[2]],
opp = split(advance, 1:2)[[1]]) -> master_home
master %>%
mutate(team = split(advance, 1:2)[[1]],
opp = split(advance, 1:2)[[2]]) -> master_away
master_home %>%
bind_rows(master_away) -> master_overall
View(master_overall)
master_overall %>%
left_join(bracket, by = c("team" = "School")) %>%
clean_names() %>%
select(-game_id, -seed, -rpi, -berth_type, -record, -region) %>%
replace(is.na(.), "unkown_conf") %>%
mutate(team = factor(team, levels = levels(train_set$team)),
opp = factor(opp, levels = levels(train_set$opp)),
conference = factor(conference, levels = levels(train_set$conference))) -> round_2
View(round_2)
pred <- predict(svm_lin_real, round_2, type="class")
clean_tournament$win <- pred
round_2$win <- pred
View(round_2)
table(round_2)
table(round_2$win)
round_2 %>%
mutate(advance = case_when(
win == 1 ~ team,
win == 0 ~ opp)) %>%
select(advance) %>%
as_vector() -> advance
master <- tibble(game_id = 1:(length(round_2)/2))
master %>%
mutate(team = split(round_2, 1:2)[[2]],
opp = split(round_2, 1:2)[[1]]) -> master_home
master %>%
mutate(team = split(advance, 1:2)[[2]],
opp = split(advance, 1:2)[[1]]) -> master_home
master %>%
mutate(team = split(advance, 1:2)[[1]],
opp = split(advance, 1:2)[[2]]) -> master_away
round_2 %>%
mutate(advance = case_when(
win == 1 ~ team,
win == 0 ~ opp)) %>%
select(advance) %>%
as_vector() -> advance
master <- tibble(game_id = 1:(length(advance)/2))
master %>%
mutate(team = split(advance, 1:2)[[2]],
opp = split(advance, 1:2)[[1]]) -> master_home
master %>%
mutate(team = split(advance, 1:2)[[1]],
opp = split(advance, 1:2)[[2]]) -> master_away
master_home %>%
bind_rows(master_away) -> master_overall
master_overall %>%
left_join(bracket, by = c("team" = "School")) %>%
clean_names() %>%
select(-game_id, -seed, -rpi, -berth_type, -record, -region) %>%
replace(is.na(.), "unkown_conf") %>%
mutate(team = factor(team, levels = levels(train_set$team)),
opp = factor(opp, levels = levels(train_set$opp)),
conference = factor(conference, levels = levels(train_set$conference))) -> round_3
pred <- predict(svm_lin_real, round_3, type="class")
round_3$win <- pred
View(round_3)
table(round$win)
table(round_3$win)
round_3 %>%
mutate(advance = case_when(
win == 1 ~ team,
win == 0 ~ opp)) %>%
select(advance) %>%
as_vector() -> advance
advance
advance[5]
advance[5] <- "Baylor"
advance
master <- tibble(game_id = 1:(length(advance)/2))
master %>%
mutate(team = split(advance, 1:2)[[2]],
opp = split(advance, 1:2)[[1]]) -> master_home
master %>%
mutate(team = split(advance, 1:2)[[1]],
opp = split(advance, 1:2)[[2]]) -> master_away
master_home %>%
bind_rows(master_away) -> master_overall
master_overall %>%
left_join(bracket, by = c("team" = "School")) %>%
clean_names() %>%
select(-game_id, -seed, -rpi, -berth_type, -record, -region) %>%
replace(is.na(.), "unkown_conf") %>%
mutate(team = factor(team, levels = levels(train_set$team)),
opp = factor(opp, levels = levels(train_set$opp)),
conference = factor(conference, levels = levels(train_set$conference))) -> round_3
master_overall %>%
left_join(bracket, by = c("team" = "School")) %>%
clean_names() %>%
select(-game_id, -seed, -rpi, -berth_type, -record, -region) %>%
replace(is.na(.), "unkown_conf") %>%
mutate(team = factor(team, levels = levels(train_set$team)),
opp = factor(opp, levels = levels(train_set$opp)),
conference = factor(conference, levels = levels(train_set$conference))) -> round_4
pred <- predict(svm_lin_real, round_4, type="class")
round_4$win <- pred
View(round_4)
clean_tournament <- tibble(clean_tournament)
clean_tournament %>%
dplyr::slice(1:5, 7:32, 38) %>%
mutate(advance = case_when(
win == 1 ~ team,
win == 0 ~ opp
)) %>% dplyr::slice(1:5, 32, 6:31) %>%
select(advance) %>%
as_vector() -> advance
master <- tibble(game_id = 1:(length(advance)/2))
master %>%
mutate(team = split(advance, 1:2)[[2]],
opp = split(advance, 1:2)[[1]]) -> master_home
master %>%
mutate(team = split(advance, 1:2)[[1]],
opp = split(advance, 1:2)[[2]]) -> master_away
master_home %>%
bind_rows(master_away) -> master_overall
master_overall %>%
left_join(bracket, by = c("team" = "School")) %>%
clean_names() %>%
select(-game_id, -seed, -rpi, -berth_type, -record, -region) %>%
replace(is.na(.), "unkown_conf") %>%
mutate(team = factor(team, levels = levels(train_set$team)),
opp = factor(opp, levels = levels(train_set$opp)),
conference = factor(conference, levels = levels(train_set$conference))) -> round_2
pred <- predict(svm_lin_real, round_2, type="class")
round_2$win <- pred
round_2 %>%
mutate(advance = case_when(
win == 1 ~ team,
win == 0 ~ opp)) %>%
select(advance) %>%
as_vector() -> advance
master <- tibble(game_id = 1:(length(advance)/2))
advance
round_2 %>%
mutate(advance = case_when(
win == 1 ~ team,
win == 0 ~ opp)) %>%
select(advance) %>%
dplyr::slice(1:16) %>%
as_vector() -> advance
master <- tibble(game_id = 1:(length(advance)/2))
master %>%
mutate(team = split(advance, 1:2)[[2]],
opp = split(advance, 1:2)[[1]]) -> master_home
master %>%
mutate(team = split(advance, 1:2)[[1]],
opp = split(advance, 1:2)[[2]]) -> master_away
master_home %>%
bind_rows(master_away) -> master_overall
master_overall %>%
left_join(bracket, by = c("team" = "School")) %>%
clean_names() %>%
select(-game_id, -seed, -rpi, -berth_type, -record, -region) %>%
replace(is.na(.), "unkown_conf") %>%
mutate(team = factor(team, levels = levels(train_set$team)),
opp = factor(opp, levels = levels(train_set$opp)),
conference = factor(conference, levels = levels(train_set$conference))) -> round_3
pred <- predict(svm_lin_real, round_3, type="class")
round_3$win <- pred
View(round_3)
round_3 %>%
mutate(advance = case_when(
win == 1 ~ team,
win == 0 ~ opp)) %>%
select(advance) %>%
dplyr::slice(1:8) %>%
as_vector() -> advance
master <- tibble(game_id = 1:(length(advance)/2))
master %>%
mutate(team = split(advance, 1:2)[[2]],
opp = split(advance, 1:2)[[1]]) -> master_home
master %>%
mutate(team = split(advance, 1:2)[[1]],
opp = split(advance, 1:2)[[2]]) -> master_away
master_home %>%
bind_rows(master_away) -> master_overall
master_overall %>%
left_join(bracket, by = c("team" = "School")) %>%
clean_names() %>%
select(-game_id, -seed, -rpi, -berth_type, -record, -region) %>%
replace(is.na(.), "unkown_conf") %>%
mutate(team = factor(team, levels = levels(train_set$team)),
opp = factor(opp, levels = levels(train_set$opp)),
conference = factor(conference, levels = levels(train_set$conference))) -> round_4
pred <- predict(svm_lin_real, round_4, type="class")
round_4$win <- pred
View(round_4)
round_4 %>%
mutate(advance = case_when(
win == 1 ~ team,
win == 0 ~ opp)) %>%
select(advance) %>%
dplyr::slice(1:4) %>%
as_vector() -> advance
master <- tibble(game_id = 1:(length(advance)/2))
master %>%
mutate(team = split(advance, 1:2)[[2]],
opp = split(advance, 1:2)[[1]]) -> master_home
master %>%
mutate(team = split(advance, 1:2)[[1]],
opp = split(advance, 1:2)[[2]]) -> master_away
master_home %>%
bind_rows(master_away) -> master_overall
master_overall %>%
left_join(bracket, by = c("team" = "School")) %>%
clean_names() %>%
select(-game_id, -seed, -rpi, -berth_type, -record, -region) %>%
replace(is.na(.), "unkown_conf") %>%
mutate(team = factor(team, levels = levels(train_set$team)),
opp = factor(opp, levels = levels(train_set$opp)),
conference = factor(conference, levels = levels(train_set$conference))) -> round_5
View(round_5)
pred <- predict(svm_lin_real, round_5, type="class")
round_5$win <- pred
View(round_5)
View(master_home)
View(round_4)
master %>%
mutate(team = advance[1], advance[3],
opp = advance[2], advance[4]) -> master_home
View(master_home)
master %>%
mutate(team = c(advance[1], advance[3]),
opp = c(advance[2], advance[4])) -> master_home
View(master_away)
View(master_home)
master %>%
mutate(team = c(advance[1], advance[3]),
opp = c(advance[2], advance[4])) -> master_home
View(master_home)
advance
advance1
advance[1]
advance$1
round_4 %>%
mutate(advance = case_when(
win == 1 ~ team,
win == 0 ~ opp)) %>%
select(advance) %>%
dplyr::slice(1:4) -> advance
master <- tibble(game_id = 1:(length(advance)/2))
advance$advance[1]
master %>%
mutate(team = c(advance[1,1], advance[3,1]),
opp = c(advance[2], advance[4])) -> master_home
master %>%
mutate(team = c(advance$advance[1], advance$advance[3]),
opp = c(advance$advance[2], advance$advance[4])) -> master_home
round_4 %>%
mutate(advance = case_when(
win == 1 ~ team,
win == 0 ~ opp)) %>%
select(advance) %>%
dplyr::slice(1:4) %>%
as.vector() -> advance
master <- tibble(game_id = 1:(length(advance)/2))
master %>%
mutate(team = c(advance[1], advance[3]),
opp = c(advance[2], advance[4])) -> master_home
round_4 %>%
mutate(advance = case_when(
win == 1 ~ team,
win == 0 ~ opp)) %>%
select(advance) %>%
dplyr::slice(1:4) %>%
as.vector() -> advance
master <- tibble(game_id = 1:(length(advance)/2))
master %>%
mutate(team = c(advance[1], advance[3]),
opp = c(advance[2], advance[4])) -> master_home
advance
round_4 %>%
mutate(advance = case_when(
win == 1 ~ team,
win == 0 ~ opp)) %>%
select(advance) %>%
dplyr::slice(1:4) %>%
as_vector() -> advance
master <- tibble(game_id = 1:(length(advance)/2))
master %>%
mutate(team = c(advance[1], advance[3]),
opp = c(advance[2], advance[4])) -> master_home
View(master_home)
master %>%
mutate(team = c(advance[2], advance[4]),
opp = c(advance[1], advance[3])) -> master_away
master_home %>%
bind_rows(master_away) -> master_overall
master_overall %>%
left_join(bracket, by = c("team" = "School")) %>%
clean_names() %>%
select(-game_id, -seed, -rpi, -berth_type, -record, -region) %>%
replace(is.na(.), "unkown_conf") %>%
mutate(team = factor(team, levels = levels(train_set$team)),
opp = factor(opp, levels = levels(train_set$opp)),
conference = factor(conference, levels = levels(train_set$conference))) -> round_5
master_overall %>%
left_join(bracket, by = c("team" = "School")) %>%
clean_names() %>%
select(-game_id, -seed, -rpi, -berth_type, -record, -region) %>%
replace(is.na(.), "unkown_conf") %>%
mutate(team = factor(team, levels = levels(train_set$team)),
opp = factor(opp, levels = levels(train_set$opp)),
conference = factor(conference, levels = levels(train_set$conference))) -> round_6
advance
advance[1]
levels(advance[1])
levels(advance)advance[1]
levels(advance)[advance]
key <- levels(advance)[advance]
master %>%
mutate(team = c(key[1], key[3]),
opp = c(key[2], key[4])) -> master_home
master %>%
mutate(team = c(key[2], key[4]),
opp = c(key[1], key[3])) -> master_away
master_home %>%
bind_rows(master_away) -> master_overall
master_overall %>%
left_join(bracket, by = c("team" = "School")) %>%
clean_names() %>%
select(-game_id, -seed, -rpi, -berth_type, -record, -region) %>%
replace(is.na(.), "unkown_conf") %>%
mutate(team = factor(team, levels = levels(train_set$team)),
opp = factor(opp, levels = levels(train_set$opp)),
conference = factor(conference, levels = levels(train_set$conference))) -> round_6
pred <- predict(svm_lin_real, round_5, type="class")
pred <- predict(svm_lin_real, round_6, type="class")
round_6$win <- pred
View(round_6)
master %>%
mutate(team = c(key[1], key[2]),
opp = c(key[3], key[4])) -> master_home
master %>%
mutate(team = c(key[3], key[4]),
opp = c(key[1], key[2])) -> master_away
master_home %>%
bind_rows(master_away) -> master_overall
master_overall %>%
left_join(bracket, by = c("team" = "School")) %>%
clean_names() %>%
select(-game_id, -seed, -rpi, -berth_type, -record, -region) %>%
replace(is.na(.), "unkown_conf") %>%
mutate(team = factor(team, levels = levels(train_set$team)),
opp = factor(opp, levels = levels(train_set$opp)),
conference = factor(conference, levels = levels(train_set$conference))) -> round_6
pred <- predict(svm_lin_real, round_6, type="class")
round_6$win <- pred
View(round_6)
master_overall %>%
left_join(bracket, by = c("team" = "School")) %>%
clean_names() %>%
select(-game_id, -seed, -rpi, -berth_type, -record, -region) %>%
replace(is.na(.), "unkown_conf") %>%
mutate(team = factor(team, levels = levels(train_set$team)),
opp = factor(opp, levels = levels(train_set$opp)),
conference = factor(conference, levels = levels(train_set$conference))) -> round_5
pred <- predict(svm_lin_real, round_5, type="class")
round_5$win <- pred
round_5 %>%
mutate(advance = case_when(
win == 1 ~ team,
win == 0 ~ opp)) %>%
select(advance) %>%
dplyr::slice(1:4) %>%
as_vector() -> advance
round_5 %>%
mutate(advance = case_when(
win == 1 ~ team,
win == 0 ~ opp)) %>%
select(advance) %>%
dplyr::slice(1:2) %>%
as_vector() -> advance
advance
View(round_5)
View(round_5)
round_5$win[1] <- 1
round_5 %>%
mutate(advance = case_when(
win == 1 ~ team,
win == 0 ~ opp)) %>%
select(advance) %>%
dplyr::slice(1:2) %>%
as_vector() -> advance
master <- tibble(game_id = 1:(length(advance)/2))
key <- levels(advance)[advance]
key <- levels(advance)[advance]
master %>%
mutate(team = c(key[1]),
opp = c(key[2])) -> master_home
master %>%
mutate(team = c(key[2]),
opp = c(key[1])) -> master_away
master_home %>%
bind_rows(master_away) -> master_overall
master_overall %>%
left_join(bracket, by = c("team" = "School")) %>%
clean_names() %>%
select(-game_id, -seed, -rpi, -berth_type, -record, -region) %>%
replace(is.na(.), "unkown_conf") %>%
mutate(team = factor(team, levels = levels(train_set$team)),
opp = factor(opp, levels = levels(train_set$opp)),
conference = factor(conference, levels = levels(train_set$conference))) -> round_5
master_overall %>%
left_join(bracket, by = c("team" = "School")) %>%
clean_names() %>%
select(-game_id, -seed, -rpi, -berth_type, -record, -region) %>%
replace(is.na(.), "unkown_conf") %>%
mutate(team = factor(team, levels = levels(train_set$team)),
opp = factor(opp, levels = levels(train_set$opp)),
conference = factor(conference, levels = levels(train_set$conference))) -> round_6
master_overall %>%
left_join(bracket, by = c("team" = "School")) %>%
clean_names() %>%
select(-game_id, -seed, -rpi, -berth_type, -record, -region) %>%
replace(is.na(.), "unkown_conf") %>%
mutate(team = factor(team, levels = levels(train_set$team)),
opp = factor(opp, levels = levels(train_set$opp)),
conference = factor(conference, levels = levels(train_set$conference))) -> round_6
pred <- predict(svm_lin_real, round_6, type="class")
round_6$win <- pred
View(round_6)
