bind_rows(master_away) -> master_overall
master_overall %>%
left_join(bracket, by = c("team" = "School")) %>%
clean_names() %>%
drop_na(record) -> clean_master
clean_master %>%
filter(!score == "") %>%
select(-game_id, -seed, -rpi, -berth_type, -record, -region) %>%
mutate(sweep = case_when(
score == 3 & opp_score == 0 ~ 1,
TRUE ~ 0
),
win = case_when(
score == 3 ~ 1,
TRUE ~ 0
)) -> ml_ready
ml_ready %>%
mutate(across(.fns = as.factor)) %>% View()
bracket$School[!bracket$School %in% teams_list]
teams_list <- str_replace_all(pattern = "St.", replacement = "State", string = teams_list)
teams_list <- str_replace_all(pattern = " (FL)", replacement = "", string = teams_list)
teams_list <- str_replace_all(pattern = "Ky.", replacement = "Kentucky", string = teams_list)
bracket$School[!bracket$School %in% teams_list]
teams_list <- str_replace_all(pattern = "St.", replacement = "State", string = teams_list)
teams_list <- str_replace_all(pattern = " (FL)", replacement = "", string = teams_list)
teams_list <- str_replace_all(pattern = "Ky.", replacement = "Kentucky", string = teams_list)
bracket$School[!bracket$School %in% teams_list]
master <- tibble(game_id = 1:(length(teams_list)/2))
master %>%
mutate(team = split(teams_list, 1:2)[[2]],
opp = split(teams_list, 1:2)[[1]],
score = split(scores_list, 1:2)[[2]],
opp_score = split(scores_list, 1:2)[[1]]) -> master_home
master %>%
mutate(team = split(teams_list, 1:2)[[1]],
opp = split(teams_list, 1:2)[[2]],
score = split(scores_list, 1:2)[[1]],
opp_score = split(scores_list, 1:2)[[2]]) -> master_away
master_home %>%
bind_rows(master_away) -> master_overall
master_overall %>%
left_join(bracket, by = c("team" = "School")) %>%
clean_names() %>%
drop_na(record) -> clean_master
clean_master %>%
filter(!score == "") %>%
select(-game_id, -seed, -rpi, -berth_type, -record, -region) %>%
mutate(sweep = case_when(
score == 3 & opp_score == 0 ~ 1,
TRUE ~ 0
),
win = case_when(
score == 3 ~ 1,
TRUE ~ 0
)) -> ml_ready
ml_ready %>%
mutate(across(.fns = as.factor)) %>% View()
teams_list <- c()
scores_list <- c()
options <- c("08", "09", "10", "11")
count <- 0
for (i in 1:4) {
month <- options[i]
if (month == "09" | month == "11") {
for (day in 1:30) {
try({
url <- paste0("https://www.ncaa.com/scoreboard/volleyball-women/d1/2021/",month,"/",day,"/all-conf")
webpage <- read_html(url)
teams_html <- html_nodes(webpage,'.gamePod-game-team-name') %>% html_text()
teams_list <- append(teams_list, teams_html)
scores_html <- html_nodes(webpage, '.gamePod-game-team-score') %>% html_text()
scores_list <- append(scores_list, scores_html)
count <- count + 1
print(count)
Sys.sleep(0.1)
}, silent = TRUE)
}
} else if (month == "08" | month == "10") {
for (day in 1:31) {
try({
url <- paste0("https://www.ncaa.com/scoreboard/volleyball-women/d1/2021/",month,"/",day,"/all-conf")
webpage <- read_html(url)
teams_html <- html_nodes(webpage,'.gamePod-game-team-name') %>% html_text()
teams_list <- append(teams_list, teams_html)
scores_html <- html_nodes(webpage, '.gamePod-game-team-score') %>% html_text()
scores_list <- append(scores_list, scores_html)
count <- count + 1
print(count)
Sys.sleep(0.1)
}, silent = TRUE)
}
}
}
table(teams_list)
teams_list <- str_replace_all(pattern = "St.", replacement = "State", string = teams_list)
teams_list <- str_replace_all(pattern = " (FL)", replacement = "", string = teams_list)
teams_list <- str_replace_all(pattern = "Ky.", replacement = "Kentucky", string = teams_list)
table(teams_list)
bracket$team[!bracket$team %in% teams_list]
master <- tibble(game_id = 1:(length(teams_list)/2))
master %>%
mutate(team = split(teams_list, 1:2)[[2]],
opp = split(teams_list, 1:2)[[1]],
score = split(scores_list, 1:2)[[2]],
opp_score = split(scores_list, 1:2)[[1]]) -> master_home
master %>%
mutate(team = split(teams_list, 1:2)[[1]],
opp = split(teams_list, 1:2)[[2]],
score = split(scores_list, 1:2)[[1]],
opp_score = split(scores_list, 1:2)[[2]]) -> master_away
master_home %>%
bind_rows(master_away) -> master_overall
master_overall %>%
left_join(bracket, by = c("team" = "School")) %>%
clean_names() %>%
drop_na(record) -> clean_master
clean_master %>%
filter(!score == "") %>%
select(-game_id, -seed, -rpi, -berth_type, -record, -region) %>%
mutate(sweep = case_when(
score == 3 & opp_score == 0 ~ 1,
TRUE ~ 0
),
win = case_when(
score == 3 ~ 1,
TRUE ~ 0
)) -> ml_ready
ml_ready %>%
mutate(across(.fns = as.factor)) %>% View()
unique(clean_master$team)
bracket$School[!bracket$School %in% teams_list]
table(teams_list)
teams_list <- c()
scores_list <- c()
options <- c("08", "09", "10", "11")
count <- 0
for (i in 1:4) {
month <- options[i]
if (month == "09" | month == "11") {
for (day in 1:30) {
try({
url <- paste0("https://www.ncaa.com/scoreboard/volleyball-women/d1/2021/",month,"/",day,"/all-conf")
webpage <- read_html(url)
teams_html <- html_nodes(webpage,'.gamePod-game-team-name') %>% html_text()
teams_list <- append(teams_list, teams_html)
scores_html <- html_nodes(webpage, '.gamePod-game-team-score') %>% html_text()
scores_list <- append(scores_list, scores_html)
count <- count + 1
print(count)
Sys.sleep(0.1)
}, silent = TRUE)
}
} else if (month == "08" | month == "10") {
for (day in 1:31) {
try({
url <- paste0("https://www.ncaa.com/scoreboard/volleyball-women/d1/2021/",month,"/",day,"/all-conf")
webpage <- read_html(url)
teams_html <- html_nodes(webpage,'.gamePod-game-team-name') %>% html_text()
teams_list <- append(teams_list, teams_html)
scores_html <- html_nodes(webpage, '.gamePod-game-team-score') %>% html_text()
scores_list <- append(scores_list, scores_html)
count <- count + 1
print(count)
Sys.sleep(0.1)
}, silent = TRUE)
}
}
}
teams_list <- str_replace_all(pattern = "St\.$", replacement = "State", string = teams_list)
teams_list <- str_replace_all(pattern = " (FL)", replacement = "", string = teams_list)
teams_list <- str_replace_all(pattern = "Ky.", replacement = "Kentucky", string = teams_list)
teams_list <- str_replace_all(pattern = "FGCU", replacement = "Florida Gulf Coast", string = teams_list)
teams_list <- str_replace_all(pattern = "Colo.", replacement = "Colorado", string = teams_list)
teams_list <- str_replace_all(pattern = "\'i", replacement = "i", string = teams_list)
teams_list <- str_replace_all(pattern = "Mo\.", replacement = "Missouri", string = teams_list)
table(teams_list)
teams_list <- str_replace_all(pattern = regex("St\.$"), replacement = "State", string = teams_list)
teams_list <- str_replace_all(pattern = "St.$", replacement = "State", string = teams_list)
teams_list <- str_replace_all(pattern = " (FL)", replacement = "", string = teams_list)
teams_list <- str_replace_all(pattern = "Ky.", replacement = "Kentucky", string = teams_list)
teams_list <- str_replace_all(pattern = "FGCU", replacement = "Florida Gulf Coast", string = teams_list)
teams_list <- str_replace_all(pattern = "Colo.", replacement = "Colorado", string = teams_list)
teams_list <- str_replace_all(pattern = "\'i", replacement = "i", string = teams_list)
teams_list <- str_replace_all(pattern = "Mo.", replacement = "Missouri", string = teams_list)
table(teams_list)
master <- tibble(game_id = 1:(length(teams_list)/2))
master %>%
mutate(team = split(teams_list, 1:2)[[2]],
opp = split(teams_list, 1:2)[[1]],
score = split(scores_list, 1:2)[[2]],
opp_score = split(scores_list, 1:2)[[1]]) -> master_home
master %>%
mutate(team = split(teams_list, 1:2)[[1]],
opp = split(teams_list, 1:2)[[2]],
score = split(scores_list, 1:2)[[1]],
opp_score = split(scores_list, 1:2)[[2]]) -> master_away
master_home %>%
bind_rows(master_away) -> master_overall
master_overall %>%
left_join(bracket, by = c("team" = "School")) %>%
clean_names() %>%
drop_na(record) -> clean_master
clean_master %>%
filter(!score == "") %>%
select(-game_id, -seed, -rpi, -berth_type, -record, -region) %>%
mutate(sweep = case_when(
score == 3 & opp_score == 0 ~ 1,
TRUE ~ 0
),
win = case_when(
score == 3 ~ 1,
TRUE ~ 0
)) -> ml_ready
ml_ready %>%
mutate(across(.fns = as.factor)) %>% View()
bracket$team[!bracket$team %in% clean_master$team]
bracket$School[!bracket$School %in% clean_master$team]
for (i in 1:4) {
month <- options[i]
if (month == "09" | month == "11") {
for (day in 1:30) {
try({
url <- paste0("https://www.ncaa.com/scoreboard/volleyball-women/d1/2021/",month,"/",day,"/all-conf")
webpage <- read_html(url)
teams_html <- html_nodes(webpage,'.gamePod-game-team-name') %>% html_text()
teams_list <- append(teams_list, teams_html)
scores_html <- html_nodes(webpage, '.gamePod-game-team-score') %>% html_text()
scores_list <- append(scores_list, scores_html)
count <- count + 1
print(count)
Sys.sleep(0.1)
}, silent = TRUE)
}
} else if (month == "08" | month == "10") {
for (day in 1:31) {
try({
url <- paste0("https://www.ncaa.com/scoreboard/volleyball-women/d1/2021/",month,"/",day,"/all-conf")
webpage <- read_html(url)
teams_html <- html_nodes(webpage,'.gamePod-game-team-name') %>% html_text()
teams_list <- append(teams_list, teams_html)
scores_html <- html_nodes(webpage, '.gamePod-game-team-score') %>% html_text()
scores_list <- append(scores_list, scores_html)
count <- count + 1
print(count)
Sys.sleep(0.1)
}, silent = TRUE)
}
}
}
for (i in 1:4) {
month <- options[i]
if (month == "09" | month == "11") {
for (day in 1:30) {
try({
url <- paste0("https://www.ncaa.com/scoreboard/volleyball-women/d1/2021/",month,"/",day,"/all-conf")
webpage <- read_html(url)
teams_html <- html_nodes(webpage,'.gamePod-game-team-name') %>% html_text()
teams_list <- append(teams_list, teams_html)
scores_html <- html_nodes(webpage, '.gamePod-game-team-score') %>% html_text()
scores_list <- append(scores_list, scores_html)
count <- count + 1
print(count)
Sys.sleep(0.1)
}, silent = TRUE)
}
} else if (month == "08" | month == "10") {
for (day in 1:31) {
try({
url <- paste0("https://www.ncaa.com/scoreboard/volleyball-women/d1/2021/",month,"/",day,"/all-conf")
webpage <- read_html(url)
teams_html <- html_nodes(webpage,'.gamePod-game-team-name') %>% html_text()
teams_list <- append(teams_list, teams_html)
scores_html <- html_nodes(webpage, '.gamePod-game-team-score') %>% html_text()
scores_list <- append(scores_list, scores_html)
count <- count + 1
print(count)
Sys.sleep(0.1)
}, silent = TRUE)
}
}
}
## Teams and Scores Iteration ####
get_results <- function() {
teams_list <- c()
scores_list <- c()
options <- c("08", "09", "10", "11")
count <- 0
for (i in 1:4) {
month <- options[i]
if (month == "09" | month == "11") {
for (day in 1:30) {
try({
url <- paste0("https://www.ncaa.com/scoreboard/volleyball-women/d1/2021/",month,"/",day,"/all-conf")
webpage <- read_html(url)
teams_html <- html_nodes(webpage,'.gamePod-game-team-name') %>% html_text()
teams_list <- append(teams_list, teams_html)
scores_html <- html_nodes(webpage, '.gamePod-game-team-score') %>% html_text()
scores_list <- append(scores_list, scores_html)
count <- count + 1
print(count)
Sys.sleep(0.1)
}, silent = TRUE)
}
} else if (month == "08" | month == "10") {
for (day in 1:31) {
try({
url <- paste0("https://www.ncaa.com/scoreboard/volleyball-women/d1/2021/",month,"/",day,"/all-conf")
webpage <- read_html(url)
teams_html <- html_nodes(webpage,'.gamePod-game-team-name') %>% html_text()
teams_list <- append(teams_list, teams_html)
scores_html <- html_nodes(webpage, '.gamePod-game-team-score') %>% html_text()
scores_list <- append(scores_list, scores_html)
count <- count + 1
print(count)
Sys.sleep(0.1)
}, silent = TRUE)
}
}
}
}
get_results()
## Teams and Scores Iteration ####
get_results <- function() {
teams_list <- c()
scores_list <- c()
options <- c("08", "09", "10", "11")
count <- 0
for (i in 1:4) {
month <- options[i]
if (month == "09" | month == "11") {
for (day in 1:30) {
try({
url <- paste0("https://www.ncaa.com/scoreboard/volleyball-women/d1/2021/",month,"/",day,"/all-conf")
webpage <- read_html(url)
teams_html <- html_nodes(webpage,'.gamePod-game-team-name') %>% html_text()
teams_list <- append(teams_list, teams_html)
scores_html <- html_nodes(webpage, '.gamePod-game-team-score') %>% html_text()
scores_list <- append(scores_list, scores_html)
count <- count + 1
print(count)
Sys.sleep(0.1)
}, silent = TRUE)
}
} else if (month == "08" | month == "10") {
for (day in 1:31) {
try({
url <- paste0("https://www.ncaa.com/scoreboard/volleyball-women/d1/2021/",month,"/",day,"/all-conf")
webpage <- read_html(url)
teams_html <- html_nodes(webpage,'.gamePod-game-team-name') %>% html_text()
teams_list <- append(teams_list, teams_html)
scores_html <- html_nodes(webpage, '.gamePod-game-team-score') %>% html_text()
scores_list <- append(scores_list, scores_html)
count <- count + 1
print(count)
Sys.sleep(0.1)
}, silent = TRUE)
}
}
}
return(teams_list, scores_list)
}
temp <- get_results()
## Teams and Scores Iteration ####
get_results <- function() {
teams_list <- c()
scores_list <- c()
options <- c("08", "09", "10", "11")
count <- 0
for (i in 1:4) {
month <- options[i]
if (month == "09" | month == "11") {
for (day in 1:30) {
try({
url <- paste0("https://www.ncaa.com/scoreboard/volleyball-women/d1/2021/",month,"/",day,"/all-conf")
webpage <- read_html(url)
teams_html <- html_nodes(webpage,'.gamePod-game-team-name') %>% html_text()
teams_list <- append(teams_list, teams_html)
scores_html <- html_nodes(webpage, '.gamePod-game-team-score') %>% html_text()
scores_list <- append(scores_list, scores_html)
count <- count + 1
print(count)
Sys.sleep(0.1)
}, silent = TRUE)
}
} else if (month == "08" | month == "10") {
for (day in 1:31) {
try({
url <- paste0("https://www.ncaa.com/scoreboard/volleyball-women/d1/2021/",month,"/",day,"/all-conf")
webpage <- read_html(url)
teams_html <- html_nodes(webpage,'.gamePod-game-team-name') %>% html_text()
teams_list <- append(teams_list, teams_html)
scores_html <- html_nodes(webpage, '.gamePod-game-team-score') %>% html_text()
scores_list <- append(scores_list, scores_html)
count <- count + 1
print(count)
Sys.sleep(0.1)
}, silent = TRUE)
}
}
}
return(list("teams" = teams_list, "scores" = scores_list))
}
temp <- get_results()
teams_list <- temp$teams
scores_list <- temp$scores
table(teams_list)
teams_list <- str_replace_all(pattern = "St.$", replacement = "State", string = teams_list)
teams_list <- str_replace_all(pattern = " (FL)", replacement = "", string = teams_list)
teams_list <- str_replace_all(pattern = "Ky.", replacement = "Kentucky", string = teams_list)
teams_list <- str_replace_all(pattern = "FGCU", replacement = "Florida Gulf Coast", string = teams_list)
teams_list <- str_replace_all(pattern = "Colo.", replacement = "Colorado", string = teams_list)
teams_list <- str_replace_all(pattern = "\'i", replacement = "i", string = teams_list)
teams_list <- str_replace_all(pattern = "Mo.", replacement = "Missouri", string = teams_list)
table(teams_list)
bracket$School[!bracket$School %in% teams_list]
teams_list <- str_replace_all(pattern = "'i", replacement = "i", string = teams_list)
teams_list <- str_replace_all(pattern = "-CC", replacement = "", string = teams_list)
bracket$School[!bracket$School %in% teams_list]
table(teams_list)
teams_list <- temp$teams
scores_list <- temp$scores
table(teams_list)
teams_list <- str_replace_all(pattern = "St.$", replacement = "State", string = teams_list)
teams_list <- str_replace_all(pattern = " (FL)", replacement = "", string = teams_list)
teams_list <- str_replace_all(pattern = "Ky.", replacement = "Kentucky", string = teams_list)
teams_list <- str_replace_all(pattern = "FGCU", replacement = "Florida Gulf Coast", string = teams_list)
teams_list <- str_replace_all(pattern = "Colo.", replacement = "Colorado", string = teams_list)
teams_list <- str_replace_all(pattern = "'i", replacement = "i", string = teams_list)
teams_list <- str_replace_all(pattern = "Mo.", replacement = "Missouri", string = teams_list)
teams_list <- str_replace_all(pattern = "-CC", replacement = "", string = teams_list)
bracket$School[!bracket$School %in% teams_list]
table(teams_list)
teams_list <- temp$teams
scores_list <- temp$scores
table(teams_list)
teams_list <- str_replace_all(pattern = "St.$", replacement = "State", string = teams_list)
teams_list <- str_replace_all(pattern = " (FL)", replacement = "", string = teams_list)
teams_list <- str_replace_all(pattern = "Ky.", replacement = "Kentucky", string = teams_list)
teams_list <- str_replace_all(pattern = "FGCU", replacement = "Florida Gulf Coast", string = teams_list)
teams_list <- str_replace_all(pattern = "Colo.", replacement = "Colorado", string = teams_list)
teams_list <- str_replace_all(pattern = "ii", replacement = "'i", string = teams_list)
teams_list <- str_replace_all(pattern = "Mo.", replacement = "Missouri", string = teams_list)
teams_list <- str_replace_all(pattern = "Texas A&M", replacement = "Texas A&M-CC", string = teams_list)
bracket$School[!bracket$School %in% teams_list]
table(teams_list)
teams_list <- temp$teams
scores_list <- temp$scores
table(teams_list)
teams_list <- str_replace_all(pattern = "St.$", replacement = "State", string = teams_list)
teams_list <- str_replace_all(pattern = " (FL)", replacement = "", string = teams_list)
teams_list <- str_replace_all(pattern = "Ky.", replacement = "Kentucky", string = teams_list)
teams_list <- str_replace_all(pattern = "FGCU", replacement = "Florida Gulf Coast", string = teams_list)
teams_list <- str_replace_all(pattern = "Colo.", replacement = "Colorado", string = teams_list)
teams_list <- str_replace_all(pattern = "ii", replacement = "i'i", string = teams_list)
teams_list <- str_replace_all(pattern = "Mo.", replacement = "Missouri", string = teams_list)
teams_list <- str_replace_all(pattern = "Texas A&M", replacement = "Texas A&M–CC", string = teams_list)
bracket$School[!bracket$School %in% teams_list]
table(teams_list)
master <- tibble(game_id = 1:(length(teams_list)/2))
master %>%
mutate(team = split(teams_list, 1:2)[[2]],
opp = split(teams_list, 1:2)[[1]],
score = split(scores_list, 1:2)[[2]],
opp_score = split(scores_list, 1:2)[[1]]) -> master_home
master %>%
mutate(team = split(teams_list, 1:2)[[1]],
opp = split(teams_list, 1:2)[[2]],
score = split(scores_list, 1:2)[[1]],
opp_score = split(scores_list, 1:2)[[2]]) -> master_away
master_home %>%
bind_rows(master_away) -> master_overall
master_overall %>%
left_join(bracket, by = c("team" = "School")) %>%
clean_names() %>%
drop_na(record) -> clean_master
clean_master %>%
filter(!score == "") %>%
select(-game_id, -seed, -rpi, -berth_type, -record, -region) %>%
mutate(sweep = case_when(
score == 3 & opp_score == 0 ~ 1,
TRUE ~ 0
),
win = case_when(
score == 3 ~ 1,
TRUE ~ 0
)) -> ml_ready
ml_ready %>%
mutate(across(.fns = as.factor)) %>% View()
?naiveBayes
ml_ready %>%
mutate(across(.fns = as.factor)) -> nb_data
## NaiveBayes ####
library(e1071)
nb_classifier <- naiveBayes(nb_data$win~.,data=nb_data)
View(nb_data)
nb_predict_charges <-predict(nb_classifier, nb_data[-7], type = "class")
table(nb_predict_charges,nb_data$win)
accuracy_nb <- (sum((nb_predict_charges==nb_data$win))/nrow(nb_data))
cm_accuracy_nb <- confusionMatrix(data = nb_predict_charges, reference = nb_data$win)
# Set to factor and hope for best ####
library(e1071)
library(caret)
cm_accuracy_nb <- confusionMatrix(data = nb_predict_charges, reference = nb_data$win)
cm_accuracy_nb
?sample
sample(nb_data, floor(.7*nrow(nb_data)))
sample(nb_data, size = floor(.7*nrow(nb_data)))
#NEED TEST AND TRAIN SET
n = nrow(nb_data)
train.index = sample(n,floor(0.75*n))
train_set <- nb_data[n]
train_set <- nb_data[n,]
